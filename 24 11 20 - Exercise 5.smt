(declare-datatypes () ((P q w e r t y)))

(declare-fun Familiar (P P) Bool)

(assert (forall ((x P) (y P)) (= (Familiar x y) (Familiar y x))))

(push)
    (assert (exists ((x P) (y P) (z P)) (and (Familiar x y) (Familiar x z) (Familiar z y))))
    (assert (exists ((x P) (y P) (z P)) (and (not (Familiar x y)) (not (Familiar x z)) (not (Familiar z y)))))
    (check-sat)
    (get-value ((Familiar q q) ;bro ma questo non e giusto perche non puoi essere familisr con te stesso
                (Familiar q w) ;bro ma non basta che metti solo q w e non riscrivi wq?
                (Familiar q e) 
                (Familiar q r) 
                (Familiar q t) 
                (Familiar q y) 
                (Familiar w q) 
                (Familiar w w) 
                (Familiar w e) 
                (Familiar w r) 
                (Familiar w t) 
                (Familiar w y) 
                (Familiar e q)
                (Familiar e w)
                (Familiar e e)
                (Familiar e r)
                (Familiar e t)
                (Familiar e y)
                (Familiar r q)
                (Familiar r w)
                (Familiar r e)
                (Familiar r r)
                (Familiar r t)
                (Familiar r y)
                (Familiar t q)
                (Familiar t w)
                (Familiar t e)
                (Familiar t r)
                (Familiar t t)
                (Familiar t y)
                (Familiar y q)
                (Familiar y w)
                (Familiar y e)
                (Familiar y r)
                (Familiar y t)
                (Familiar y y)))
(pop)

(assert (not (exists ((x P) (y P) (z P)) (and (Familiar x y) (Familiar x z) (Familiar z y)))))
(assert (not (exists ((x P) (y P) (z P)) (and (not (Familiar x y)) (not (Familiar x z)) (not (Familiar z y))))))

(check-sat)